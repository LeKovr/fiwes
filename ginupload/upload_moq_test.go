// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package ginupload

import (
	"mime/multipart"
	"sync"
)

var (
	lockUploaderMockHandleBase64    sync.RWMutex
	lockUploaderMockHandleMultiPart sync.RWMutex
	lockUploaderMockHandleURL       sync.RWMutex
)

// Ensure, that UploaderMock does implement Uploader.
// If this is not the case, regenerate this file with moq.
var _ Uploader = &UploaderMock{}

// UploaderMock is a mock implementation of Uploader.
//
//     func TestSomethingThatUsesUploader(t *testing.T) {
//
//         // make and configure a mocked Uploader
//         mockedUploader := &UploaderMock{
//             HandleBase64Func: func(data string, name string) (*string, error) {
// 	               panic("mock out the HandleBase64 method")
//             },
//             HandleMultiPartFunc: func(form *multipart.Form) (*string, error) {
// 	               panic("mock out the HandleMultiPart method")
//             },
//             HandleURLFunc: func(url string) (*string, error) {
// 	               panic("mock out the HandleURL method")
//             },
//         }
//
//         // use mockedUploader in code that requires Uploader
//         // and then make assertions.
//
//     }
type UploaderMock struct {
	// HandleBase64Func mocks the HandleBase64 method.
	HandleBase64Func func(data string, name string) (*string, error)

	// HandleMultiPartFunc mocks the HandleMultiPart method.
	HandleMultiPartFunc func(form *multipart.Form) (*string, error)

	// HandleURLFunc mocks the HandleURL method.
	HandleURLFunc func(url string) (*string, error)

	// calls tracks calls to the methods.
	calls struct {
		// HandleBase64 holds details about calls to the HandleBase64 method.
		HandleBase64 []struct {
			// Data is the data argument value.
			Data string
			// Name is the name argument value.
			Name string
		}
		// HandleMultiPart holds details about calls to the HandleMultiPart method.
		HandleMultiPart []struct {
			// Form is the form argument value.
			Form *multipart.Form
		}
		// HandleURL holds details about calls to the HandleURL method.
		HandleURL []struct {
			// URL is the url argument value.
			URL string
		}
	}
}

// HandleBase64 calls HandleBase64Func.
func (mock *UploaderMock) HandleBase64(data string, name string) (*string, error) {
	if mock.HandleBase64Func == nil {
		panic("UploaderMock.HandleBase64Func: method is nil but Uploader.HandleBase64 was just called")
	}
	callInfo := struct {
		Data string
		Name string
	}{
		Data: data,
		Name: name,
	}
	lockUploaderMockHandleBase64.Lock()
	mock.calls.HandleBase64 = append(mock.calls.HandleBase64, callInfo)
	lockUploaderMockHandleBase64.Unlock()
	return mock.HandleBase64Func(data, name)
}

// HandleBase64Calls gets all the calls that were made to HandleBase64.
// Check the length with:
//     len(mockedUploader.HandleBase64Calls())
func (mock *UploaderMock) HandleBase64Calls() []struct {
	Data string
	Name string
} {
	var calls []struct {
		Data string
		Name string
	}
	lockUploaderMockHandleBase64.RLock()
	calls = mock.calls.HandleBase64
	lockUploaderMockHandleBase64.RUnlock()
	return calls
}

// HandleMultiPart calls HandleMultiPartFunc.
func (mock *UploaderMock) HandleMultiPart(form *multipart.Form) (*string, error) {
	if mock.HandleMultiPartFunc == nil {
		panic("UploaderMock.HandleMultiPartFunc: method is nil but Uploader.HandleMultiPart was just called")
	}
	callInfo := struct {
		Form *multipart.Form
	}{
		Form: form,
	}
	lockUploaderMockHandleMultiPart.Lock()
	mock.calls.HandleMultiPart = append(mock.calls.HandleMultiPart, callInfo)
	lockUploaderMockHandleMultiPart.Unlock()
	return mock.HandleMultiPartFunc(form)
}

// HandleMultiPartCalls gets all the calls that were made to HandleMultiPart.
// Check the length with:
//     len(mockedUploader.HandleMultiPartCalls())
func (mock *UploaderMock) HandleMultiPartCalls() []struct {
	Form *multipart.Form
} {
	var calls []struct {
		Form *multipart.Form
	}
	lockUploaderMockHandleMultiPart.RLock()
	calls = mock.calls.HandleMultiPart
	lockUploaderMockHandleMultiPart.RUnlock()
	return calls
}

// HandleURL calls HandleURLFunc.
func (mock *UploaderMock) HandleURL(url string) (*string, error) {
	if mock.HandleURLFunc == nil {
		panic("UploaderMock.HandleURLFunc: method is nil but Uploader.HandleURL was just called")
	}
	callInfo := struct {
		URL string
	}{
		URL: url,
	}
	lockUploaderMockHandleURL.Lock()
	mock.calls.HandleURL = append(mock.calls.HandleURL, callInfo)
	lockUploaderMockHandleURL.Unlock()
	return mock.HandleURLFunc(url)
}

// HandleURLCalls gets all the calls that were made to HandleURL.
// Check the length with:
//     len(mockedUploader.HandleURLCalls())
func (mock *UploaderMock) HandleURLCalls() []struct {
	URL string
} {
	var calls []struct {
		URL string
	}
	lockUploaderMockHandleURL.RLock()
	calls = mock.calls.HandleURL
	lockUploaderMockHandleURL.RUnlock()
	return calls
}
